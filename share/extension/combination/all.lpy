from copy import deepcopy as cp

phyllochrone = 10
ilength = 2
dt = 1.
nbSteps = phyllochrone *10
MAX_AGE = nbSteps / dt
MAXRADIUS = 1
MAX_LEAF_SIZE = 5
transport_speed = 0.1
internal_degradation_rate = 0.01
init_auxin = 10

class AgeData:
    def __init__(self,age = 0):
        self.age = age
    def increment_age(self):
        self.age += dt

class MeristemData (AgeData): 
    def __init__(self,age = 0):
        AgeData.__init__(self,age)
        
class InternodeData(AgeData): 
    def __init__(self,age = 0):
        AgeData.__init__(self,age)

class LeafData(AgeData): 
    def __init__(self,age = init_auxin):
        AgeData.__init__(self,age)


def insert_auxin_attribute(data,init_val = init_auxin):
    if not hasattr(data,'auxin'):  
      data.auxin = init_val
      nproduce I(data)

def update_auxin(d, di):
   newauxin = d.auxin + (sum([i.auxin for i in di]) - len(di)*d.auxin)*transport_speed - d.auxin* internal_degradation_rate
   # need to copy all structure to avoid side effect
   d = cp(d)
   d.auxin = newauxin
   nproduce I(d)


#def StartEach():
#    if getIterationNb()


backward()

Axiom:  M(MeristemData())

derivation length: nbSteps
production:
consider: I

#group 1:
# Aging stuff
M(m) :
    m.increment_age()
    if divmod(m.age,phyllochrone)[1] == 0:
      produce I(InternodeData()) [ L(LeafData()) ] /(180) M(m)
    else: produce M(m)


I(d) : 
  d.increment_age() # Side effect ?

L(d):
  d.increment_age() # Side effect ?

#group 2:
# Initialization of auxin stuff
I(data): 
    insert_auxin_attribute(data)
      

#group 3:
# Computation of auxin stuff
I(d1) < I(d2) > I(d3) :
   update_auxin(d2,[d1,d3])

I(d2) > I(d3) :
   update_auxin(d2,[d3])   

I(d1) < I(d2) :
   update_auxin(d2,[d1])   

group 0:
interpretation:

I(d) --> ,(int(10+d.__dict__.get('auxin',-6)))_(diameter(d.age/MAX_AGE)*MAXRADIUS)[f(ilength/2)-(90)f(MAXRADIUS*2) Label(str(round(d.__dict__.get('auxin',-1),3)))] F(ilength)
M(d) --> ,(4)_(diameter(0)*MAXRADIUS) F(ilength * 0.1 * divmod(d.age,10.)[1]) @O
I(id) < L(d) --> ,(2) +(90)f(diameter(id.age/MAX_AGE)*MAXRADIUS)/(90)^(90*(1-d.age/MAX_AGE)-30) ~l(diameter(d.age/MAX_AGE)*MAX_LEAF_SIZE)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_10 = pgl.Material("Color_10" , ambient = (0,0,48) , diffuse = 3.33333 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (6,0,43) , diffuse = 3.3 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_12 = pgl.Material("Color_12" , ambient = (12,0,38) , diffuse = 3.26667 , )
	Color_12.name = "Color_12"
	context.turtle.setMaterial(12,Color_12)
	Color_13 = pgl.Material("Color_13" , ambient = (18,0,33) , diffuse = 3.23333 , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_14 = pgl.Material("Color_14" , ambient = (24,0,28) , diffuse = 3.2 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	Color_15 = pgl.Material("Color_15" , ambient = (30,0,24) , diffuse = 3.16667 , )
	Color_15.name = "Color_15"
	context.turtle.setMaterial(15,Color_15)
	Color_16 = pgl.Material("Color_16" , ambient = (36,0,19) , diffuse = 3.13333 , )
	Color_16.name = "Color_16"
	context.turtle.setMaterial(16,Color_16)
	Color_17 = pgl.Material("Color_17" , ambient = (42,0,14) , diffuse = 3.1 , )
	Color_17.name = "Color_17"
	context.turtle.setMaterial(17,Color_17)
	Color_18 = pgl.Material("Color_18" , ambient = (47,0,9) , diffuse = 3.06667 , )
	Color_18.name = "Color_18"
	context.turtle.setMaterial(18,Color_18)
	Color_19 = pgl.Material("Color_19" , ambient = (53,0,4) , diffuse = 3.03333 , )
	Color_19.name = "Color_19"
	context.turtle.setMaterial(19,Color_19)
	Color_20 = pgl.Material("Color_20" , ambient = (60,0,0) , diffuse = 3 , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	import openalea.plantgl.all as pgl
	diameter = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.246801, 1),(0.300168, 0.67595, 1),(0.874817, 0.683975, 1),(1, 0.999808, 1)]) , 
	    )
	diameter.name = "diameter"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Function',diameter)])
	parameterset = [panel_0,]
	context["__functions__"] = [('diameter',diameter),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["diameter"] = pgl.QuantisedFunction(diameter)
