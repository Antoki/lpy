from openalea.plantgl.gui.curve2deditor import Curve2DEditor,Curve2DConstraintfrom openalea.lpy.gui.abstractobjectmanager import *
from OpenGL.GL import *def displayLineAsThumbnail(manager,obj,i,focus,objectthumbwidth, color = (1,1,0,0) ):        manager.discretizer.clear()        b = manager.getBoundingBox(obj)        lsize = b.getSize()        msize = lsize[lsize.getMaxAbsCoord()]        scaling = objectthumbwidth/(2*msize)        x0c = -b.getCenter()[0]*scaling        y0c = -b.getCenter()[1]*scaling        if 2*abs(y0c) <= objectthumbwidth:            glColor4f(0.5,0.5,0.5,0)            glLineWidth(1)            glBegin(GL_LINE_STRIP)                            glVertex2f(-objectthumbwidth/2.,-y0c)            glVertex2f(objectthumbwidth/2.,-y0c)            glEnd()                        if 2*abs(x0c) <= objectthumbwidth:            glColor4f(0.5,0.5,0.5,0)            glLineWidth(1)            glBegin(GL_LINE_STRIP)            glVertex2f(x0c,-objectthumbwidth/2.)            glVertex2f(x0c,objectthumbwidth/2.)            glEnd()                        glScalef(scaling,-scaling,1)        glTranslatef(*-b.getCenter())        pw = obj.width        obj.width = 1        if focus:            glPushMatrix()            glTranslatef(0,0,-8)            glLineWidth(6)            glColor4f(0.5,0.5,0.5,0.5)            obj.apply(manager.renderer)            glPopMatrix()            glPushMatrix()            glTranslatef(0,0,-4)            glLineWidth(4)            glColor4f(0.0,0.0,0.0,0.0)            obj.apply(manager.renderer)            glPopMatrix()        glColor4f(*color)        glLineWidth(2)        obj.apply(manager.renderer)        obj.width = pw
class Curve2DManager(AbstractPglObjectManager):
    """see the doc of the objectmanager abtsract class to undesrtand the implementation of the functions"""
    def __init__(self):
        AbstractPglObjectManager.__init__(self,"Curve2D")
            displayThumbnail = displayLineAsThumbnail
    #def displayThumbnail(self,obj,i,focus,objectthumbwidth):        
    def createDefaultObject(self):
        return Curve2DConstraint.defaultCurve()
    def getEditor(self,parent):        return Curve2DEditor(parent,Curve2DConstraint())    def setObjectToEditor(self,editor,obj):        """ ask for edition of obj with editor """        from copy import deepcopy                editor.setCurve(deepcopy(obj))    def retrieveObjectFromEditor(self,editor):        """ ask for current value of object being edited """        return editor.getCurve()        def get_managers():    return Curve2DManager()