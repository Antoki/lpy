from openalea.plantgl.gui.curve2deditor import Curve2DEditor,Curve2DConstraintfrom openalea.plantgl.scenegraph import Polyline2D, BezierCurve2D, NurbsCurve2D, Point2Array, Point3Arrayfrom openalea.lpy.gui.abstractobjectmanager import *
from OpenGL.GL import *def displayLineAsThumbnail(manager, obj, i, objectthumbwidth, color = (1,1,0,0) ):        manager.discretizer.clear()        b = manager.getBoundingBox(obj)        lsize = b.getSize()        msize = lsize[lsize.getMaxAbsCoord()]        scaling = objectthumbwidth/(2*msize)        x0c = -b.getCenter()[0]*scaling        y0c = -b.getCenter()[1]*scaling        if 2*abs(y0c) <= objectthumbwidth:            glColor4f(0.5,0.5,0.5,1.0)            glLineWidth(1)            glBegin(GL_LINE_STRIP)                            glVertex2f(-objectthumbwidth/2.,-y0c)            glVertex2f(objectthumbwidth/2.,-y0c)            glEnd()                        if 2*abs(x0c) <= objectthumbwidth:            glColor4f(0.5,0.5,0.5,1.0)            glLineWidth(1)            glBegin(GL_LINE_STRIP)            glVertex2f(x0c,-objectthumbwidth/2.)            glVertex2f(x0c,objectthumbwidth/2.)            glEnd()                        glScalef(scaling,-scaling,1)        glTranslatef(*-b.getCenter())        pw = obj.width        obj.width = 1        glColor4f(*color)        glLineWidth(2)        obj.apply(manager.renderer)        obj.width = pw
class Curve2DManager(AbstractPglObjectManager):
    """see the doc of the objectmanager abtsract class to undesrtand the implementation of the functions"""
    def __init__(self):
        AbstractPglObjectManager.__init__(self,"Curve2D")
            def displayThumbnail(self, obj, i , focus, objectthumbwidth):        if focus : color = (1,1,0,1)        else : color = (0.8,0.8,0,1)        displayLineAsThumbnail(self,obj, i , objectthumbwidth, color)        
    def createDefaultObject(self,subtype = None):        nbP = 4        if subtype == 'Polyline':             return Polyline2D(Point2Array([(-0.5+float(i)/(nbP-1),0) for i in xrange(nbP)]) )
        if subtype == 'BezierCurve':             return BezierCurve2D(Point3Array([(-0.5+float(i)/(nbP-1),0) for i in xrange(nbP)],1) )        else:             return NurbsCurve2D(Point3Array([(-0.5+float(i)/(nbP-1),0) for i in xrange(nbP)],1) )    def getEditor(self,parent):        return Curve2DEditor(parent,Curve2DConstraint())    def setObjectToEditor(self,editor,obj):        """ ask for edition of obj with editor """        from copy import deepcopy                editor.setCurve(deepcopy(obj))    def retrieveObjectFromEditor(self,editor):        """ ask for current value of object being edited """        return editor.getCurve()    def canImportData(self,fname):        from os.path import splitext        return splitext(fname)[1] == '.cset'        def importData(self,fname):        from openalea.lpy.gui.lpfg_data_import import import_contours        return import_contours(fname)    def defaultObjectTypes(self):        return ['Polyline','BezierCurve','NurbsCurve']        def get_managers():    return Curve2DManager()