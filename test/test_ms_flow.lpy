module I,L : scale = 1
module U,E : scale = 2

nbUnit = 8
nbINode   = 3
nodesize = 0.6
internodesize = 0.8
unitwidth = 0.3
nodewidth = 0.4

def EndEach(lstring):
  #print lstring
  pass 

Axiom: _(nodewidth)-(90)G

derivation length: nbINode*nbUnit*6
production:

decomposition:

G :
  nproduce ELU(1)I(1)
  for i in xrange(nbINode-1):
      nproduce I(0)
  for i in xrange(nbUnit-1):
    nproduce U(0)
    for j in xrange(nbINode):
      nproduce I(0)
  produce EL

production:

I(1) < I(y) -static-> I(1)
I(1) > L -static-> I(-1)
L < I(-1) -static-> I(1)
I(x) > I(-1) -static-> I(-1)
I(x):
  if x != 0 : produce I(0)



U(1) > E -static-> U(-1)
E < U(-1) -static-> U(1)
U(1) < U(y) -static-> U(1)
U(x) > U(-1) -static-> U(-1)
U(x):
  if x != 0 : produce U(0)

homomorphism:

U(x) --> f(nodesize)[;(1 if x ==0 else 3)_(unitwidth)F(nbINode*(internodesize+nodesize))]
I(x) --> f(nodesize/2.);(1 if x ==0 else 2)F(internodesize)f(nodesize/2.)

endlsystem
###### INITIALISATION ######

def __initialiseContext__(context):
	from openalea.plantgl.all import Material,Color3
	context.turtle.setMaterial(1,Material('Brown',Color3(6,4,1),13.8333,Color3(40,40,40),Color3(0,0,0),1,0))
	context.options.setSelection('String matching',3)
